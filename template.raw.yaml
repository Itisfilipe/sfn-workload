AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample AWS Step Function app

Globals:

  Function:
    Runtime: python3.7
    Timeout: 30

Parameters:
  ShouldCreateTable:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  ShouldCreateBucket:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  ReportsBucketName:
    Type: String
    Default: "reports-spreadsheets"
  ClientId:
    Type: String
    Default: "ADD THE APP CLIENT ID HERE"
  ClientSecret:
    Type: String
    Default: "ADD THE APP CLIENT SECRET HERE"
  DynamodDBTable:
    Type: String
    Default: "emails"

Conditions:
  CreateTable: !Equals [ !Ref ShouldCreateTable, true ]
  CreateBucket: !Equals [ !Ref ShouldCreateBucket, true ]

Resources:

  ReportsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateBucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref ReportsBucketName

  ReportsBucketPolicy:
    DependsOn: ReportsBucket
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Condition: CreateBucket
    Properties:
      Bucket: !Ref ReportsBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ReportsBucket
                  - '/*'
            Principal: '*'

  EmailsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Condition: CreateTable
    Properties:
      TableName: !Ref DynamodDBTable
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: data
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: gsi_1
          KeySchema:
            - AttributeName: sk
              KeyType: HASH
            - AttributeName: data
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  InvokeStepFunctionsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "InvokeStepFunctionsRule"
      ScheduleExpression: "cron(0 6 * * ? *)" # everyday, 6 AM UTC
      State: "ENABLED"
      Targets:
        - Arn: !Ref MyStepFunctions
          Id: "MyStepFunctions"
          RoleArn: !Sub ${InvokeStepFunctionsServiceRole.Arn}

  InvokeStepFunctionsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AllowEventsToInvokeStepFunctionsToAssumeRole"
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service: events.amazonaws.com
      Policies:
        - PolicyName: "EventsToInvokeStepFunctionsPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref MyStepFunctions

  ReadEmailsTableFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies: AmazonDynamoDBFullAccess
      Description: Retrieve all data from dynamoDB
      CodeUri: ./src/lambda/read_from_dynamodb/
      Handler: lambda.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamodDBTable

  DataToSheetFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      Timeout: 900
      Policies: AmazonS3FullAccess
      Description: Download data and save it to a CSV on S3
      CodeUri: ./src/lambda/data_to_spreadsheet/
      Handler: lambda.handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref ReportsBucketName
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret


  SendSpreadSheetToEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Gets an event with the email and S3 link and send it to the email provided using SES
      CodeUri: ./src/lambda/spreadsheet_to_email/
      Handler: lambda.handler
      Policies:
        - AmazonSESFullAccess
      Environment:
        Variables:
          BUCKET_NAME: !Ref ReportsBucketName

  MyStepFunctions:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt StepFunctionsServiceRole.Arn
      DefinitionString: !Sub |-
        ##{{STATEMACHINE_DEF}}

  StepFunctionsServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: !Join ["", ["/", !Ref "AWS::StackName", "/"]]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowStepFunctionsServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - !Sub "states.${AWS::Region}.amazonaws.com"
      Policies:
        - PolicyName: "InvokeFunctions"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub ${ReadEmailsTableFunction.Arn}
                  - !Sub ${MLToSpreadSheetFunction.Arn}
                  - !Sub ${SendSpreadSheetToEmailFunction.Arn}
